% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocessing.R
\name{findCorruptImages}
\alias{findCorruptImages}
\title{Locate the name of corrupt images}
\usage{
findCorruptImages(in.dir, file.type, pp, cores.left = NULL)
}
\arguments{
\item{in.dir}{String. The directory containing the images that need to be checked. This should lead to only one folder of images.}

\item{file.type}{String. What type of file should be searched for. This can be any file extension.}

\item{pp}{Logical. Should the function use parallel processing? This function is extremely slow so parallel processing should help speed things up a bit.}

\item{cores.left}{Numeric. How many cores should be left available when using parallel processing? The default is NULL. This is only necessary when pp=TRUE. If left at the default, the function will default to 2 cores remaining which is generally enough to continue using a PC while the function runs. I would set this to be greater than 0, otherwise the function will use the entire processing power of your computer. To see how many cores you have available for parallel processing, use: parallel::detectCores().}
}
\value{
A list of the corrupt files and the non-corrupt files on either side of it for easy locating within the file directory.
}
\description{
A useful, but slow function for locating the name and position of corrupt images within a camera folder.
}
\details{
NOTE: This function is extremely slow. It uses an apply function to run exiftool on each image separately rather than as a batch group, which greatly slows down the process. Parallel processing can help improve this speed but allowing it to check multiple images at once.
}
\examples{
\dontrun{
# No example provided
}

}
\seealso{
\code{\link{cameraRename3}}
}
\concept{corrupt images}
\concept{rename images}
\keyword{files}
